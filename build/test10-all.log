Test run 1
# pretty name = copy
# added 'JustCopy'
# pretty name = simdbinarypacking
# added 'SIMDBinaryPacking+VariableByte'
# found uniformdynamic
# sparse uniform data generation...
# generated 1024 arrays
# their size is  32768
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
14	1101	1346	32		1304	1696	17.01		
# generated 32 arrays
# their size is  1048576
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
9	1091	1367	32		1306	1473	12.04		
# generated 1 arrays
# their size is  33554432
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
4	1112	1343	32		1326	1546	7.031		
# building summary 
###################
#test 1 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1101 	 1346 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1304 	 1696 	 -1 	 17.01
#
#
###################
#test 2 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1091 	 1367 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1306 	 1473 	 -1 	 12.04
#
#
###################
#test 3 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1112 	 1343 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1326 	 1546 	 -1 	 7.031
#
#
Test run 2
# pretty name = copy
# added 'JustCopy'
# pretty name = simdbinarypacking
# added 'SIMDBinaryPacking+VariableByte'
# found uniformdynamic
# sparse uniform data generation...
# generated 1024 arrays
# their size is  32768
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
14	1147	1466	32		1312	1602	17.02		
# generated 32 arrays
# their size is  1048576
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
9	1088	1406	32		1272	1459	12.04		
# generated 1 arrays
# their size is  33554432
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
4	1119	1397	32		1347	1649	7.03		
# building summary 
###################
#test 1 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1147 	 1466 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1312 	 1602 	 -1 	 17.02
#
#
###################
#test 2 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1088 	 1406 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1272 	 1459 	 -1 	 12.04
#
#
###################
#test 3 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1119 	 1397 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1347 	 1649 	 -1 	 7.03
#
#
Test run 3
# pretty name = copy
# added 'JustCopy'
# pretty name = simdbinarypacking
# added 'SIMDBinaryPacking+VariableByte'
# found uniformdynamic
# sparse uniform data generation...
# generated 1024 arrays
# their size is  32768
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
14	1144	1443	32		1314	1650	17.02		
# generated 32 arrays
# their size is  1048576
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
9	1065	1252	32		1227	1412	12.04		
# generated 1 arrays
# their size is  33554432
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
4	1135	1386	32		1337	1587	7.031		
# building summary 
###################
#test 1 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1144 	 1443 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1314 	 1650 	 -1 	 17.02
#
#
###################
#test 2 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1065 	 1252 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1227 	 1412 	 -1 	 12.04
#
#
###################
#test 3 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1135 	 1386 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1337 	 1587 	 -1 	 7.031
#
#
Test run 4
# pretty name = copy
# added 'JustCopy'
# pretty name = simdbinarypacking
# added 'SIMDBinaryPacking+VariableByte'
# found uniformdynamic
# sparse uniform data generation...
# generated 1024 arrays
# their size is  32768
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
14	1100	1342	32		1228	1421	17.01		
# generated 32 arrays
# their size is  1048576
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
9	1062	1269	32		1281	1473	12.04		
# generated 1 arrays
# their size is  33554432
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
4	1141	1400	32		1345	1631	7.032		
# building summary 
###################
#test 1 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1100 	 1342 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1228 	 1421 	 -1 	 17.01
#
#
###################
#test 2 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1062 	 1269 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1281 	 1473 	 -1 	 12.04
#
#
###################
#test 3 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1141 	 1400 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1345 	 1631 	 -1 	 7.032
#
#
Test run 5
# pretty name = copy
# added 'JustCopy'
# pretty name = simdbinarypacking
# added 'SIMDBinaryPacking+VariableByte'
# found uniformdynamic
# sparse uniform data generation...
# generated 1024 arrays
# their size is  32768
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
14	1138	1523	32		1295	1600	17.01		
# generated 32 arrays
# their size is  1048576
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
9	1055	1236	32		1225	1438	12.04		
# generated 1 arrays
# their size is  33554432
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
4	1119	1336	32		1338	1611	7.032		
# building summary 
###################
#test 1 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1138 	 1523 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1295 	 1600 	 -1 	 17.01
#
#
###################
#test 2 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1055 	 1236 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1225 	 1438 	 -1 	 12.04
#
#
###################
#test 3 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1119 	 1336 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1338 	 1611 	 -1 	 7.032
#
#
Test run 6
# pretty name = copy
# added 'JustCopy'
# pretty name = simdbinarypacking
# added 'SIMDBinaryPacking+VariableByte'
# found uniformdynamic
# sparse uniform data generation...
# generated 1024 arrays
# their size is  32768
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
14	1150	1466	32		1311	1663	17.02		
# generated 32 arrays
# their size is  1048576
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
9	1107	1304	32		1237	1463	12.04		
# generated 1 arrays
# their size is  33554432
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
4	1111	1383	32		1334	1613	7.031		
# building summary 
###################
#test 1 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1150 	 1466 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1311 	 1663 	 -1 	 17.02
#
#
###################
#test 2 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1107 	 1304 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1237 	 1463 	 -1 	 12.04
#
#
###################
#test 3 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1111 	 1383 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1334 	 1613 	 -1 	 7.031
#
#
Test run 7
# pretty name = copy
# added 'JustCopy'
# pretty name = simdbinarypacking
# added 'SIMDBinaryPacking+VariableByte'
# found uniformdynamic
# sparse uniform data generation...
# generated 1024 arrays
# their size is  32768
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
14	1105	1329	32		1214	1658	17.01		
# generated 32 arrays
# their size is  1048576
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
9	1063	1327	32		1251	1435	12.04		
# generated 1 arrays
# their size is  33554432
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
4	1120	1369	32		1322	1590	7.031		
# building summary 
###################
#test 1 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1105 	 1329 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1214 	 1658 	 -1 	 17.01
#
#
###################
#test 2 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1063 	 1327 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1251 	 1435 	 -1 	 12.04
#
#
###################
#test 3 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1120 	 1369 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1322 	 1590 	 -1 	 7.031
#
#
Test run 8
# pretty name = copy
# added 'JustCopy'
# pretty name = simdbinarypacking
# added 'SIMDBinaryPacking+VariableByte'
# found uniformdynamic
# sparse uniform data generation...
# generated 1024 arrays
# their size is  32768
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
14	1170	1460	32		1340	1544	17.01		
# generated 32 arrays
# their size is  1048576
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
9	1062	1193	32		1231	1390	12.04		
# generated 1 arrays
# their size is  33554432
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
4	1141	1415	32		1352	1612	7.03		
# building summary 
###################
#test 1 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1170 	 1460 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1340 	 1544 	 -1 	 17.01
#
#
###################
#test 2 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1062 	 1193 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1231 	 1390 	 -1 	 12.04
#
#
###################
#test 3 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1141 	 1415 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1352 	 1612 	 -1 	 7.03
#
#
Test run 9
# pretty name = copy
# added 'JustCopy'
# pretty name = simdbinarypacking
# added 'SIMDBinaryPacking+VariableByte'
# found uniformdynamic
# sparse uniform data generation...
# generated 1024 arrays
# their size is  32768
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
14	1176	1463	32		1349	1616	17.01		
# generated 32 arrays
# their size is  1048576
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
9	1053	1383	32		1323	1469	12.04		
# generated 1 arrays
# their size is  33554432
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
4	1138	1367	32		1353	1632	7.03		
# building summary 
###################
#test 1 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1176 	 1463 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1349 	 1616 	 -1 	 17.01
#
#
###################
#test 2 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1053 	 1383 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1323 	 1469 	 -1 	 12.04
#
#
###################
#test 3 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1138 	 1367 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1353 	 1632 	 -1 	 7.03
#
#
Test run 10
# pretty name = copy
# added 'JustCopy'
# pretty name = simdbinarypacking
# added 'SIMDBinaryPacking+VariableByte'
# found uniformdynamic
# sparse uniform data generation...
# generated 1024 arrays
# their size is  32768
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
14	1080	1337	32		1165	1436	17.01		
# generated 32 arrays
# their size is  1048576
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
9	1057	1260	32		1223	1428	12.04		
# generated 1 arrays
# their size is  33554432
#JustCopy	SIMDBinaryPacking+VariableByte	
# for each scheme we give compression speed (million int./s) decompression speed and bits per integer
4	1097	1356	32		1271	1463	7.031		
# building summary 
###################
#test 1 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1080 	 1337 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1165 	 1436 	 -1 	 17.01
#
#
###################
#test 2 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1057 	 1260 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1223 	 1428 	 -1 	 12.04
#
#
###################
#test 3 of 3
#wall clock (delta mis, comp mis, decomp mis, idelta mis, bits per int)
#
#JustCopy                                 	 -1 	 1097 	 1356 	 -1 	 32
#SIMDBinaryPacking+VariableByte           	 -1 	 1271 	 1463 	 -1 	 7.031
#
#
